mutate(var_type = case_when(
var %in% c("a","b","d") ~ "main",
var %in% c("a:b","a:d","b:d") ~ "double",
var %in% c("a:b:d") ~ "triple"
)) %>%
mutate(
var = factor(var,levels = rev(c("a","b","d","a:b","a:d","b:d","a:b:d"))),
var_type = factor(var_type,levels = c("main","double","triple")),
sign_comp = factor(sign_comp,levels = c("up","down"))
) %>%
ggplot() +
aes(x= sign_comp, y= mean_pct, fill= var)+
geom_bar(stat = "identity", position = "stack")+
scale_fill_manual(values = tmp_colors)+
coord_flip()+
facet_grid(sign_comp~var_type,
scales = "free",
switch = "y",
space = "free_y") +
theme_classic()
# test diff for each var between up / down
# linear model
tmp_lm = lm(tmp_df$sgnf_pct_expl ~ tmp_df$var*tmp_df$sign_comp, na.action = na.omit )
summary(tmp_lm)
# anova
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
library(agricolae)
tmp_comp <- HSD.test(tmp_aov,c("tmp_df$var","tmp_df$sign_comp"),alpha = 0.05,group = T,console = T)
# tibble with statistical groups
tmp_stat = tibble("groups"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_df$rel_fval"]],
"stat_groups"=as.character(tmp_comp[["groups"]][["groups"]]))
tmp_stat
# OR
tmp_emmeans = emmeans(tmp_lm,~c(var,sign_comp))
test(pairs(tmp_emmeans, by = "var"), by = NULL, adjust = "bonferroni") # see adjust method?
tmp_network_M0 = network_M0_edges %>%
mutate(
# add edge color & style
color = case_when(
value > 0 ~ "#3399FF",
.default = "#FF3366"),
style = "normal",
# edge absolute values
value = abs(value)
) %>%
select(source,target,value,color,style)
# extract data
write.table(tmp_network_M0,"itol/tmp_itol_connection.txt",quote = F,sep = ",",row.names = F)
tmp_network <- tmp_network_M0 %>%
# add taxa
rowwise() %>%
mutate(
link_taxa = paste(sort(c(taxtab$taxa[taxtab$OTU == source],
taxtab$taxa[taxtab$OTU == target])),collapse = " - "),
link_order = paste(sort(c(taxtab$Order[taxtab$OTU == source],
taxtab$Order[taxtab$OTU == target])),collapse = " - "),
link_family = paste(sort(c(taxtab$Family[taxtab$OTU == source],
taxtab$Family[taxtab$OTU == target])),collapse = " - "),
link_genus = paste(sort(c(taxtab$genus_clean[taxtab$OTU == source],
taxtab$genus_clean[taxtab$OTU == target])),collapse = " - ")
)
# plot by taxa ----
# geom bar = count number of links
tmp_network %>%
filter(link_taxa %in% c("Alphaproteobacteria - Firmicutes",
"Alphaproteobacteria - Gammaproteobacteria",
"Firmicutes - Gammaproteobacteria")) %>%
ggplot() +
aes(x = link_taxa, fill = color) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c(`#3399FF` = "#3399FF",`#FF3366` = "#FF3366")
) +
labs(x = "Taxa", y = "Number of links") +
coord_flip() +
theme_minimal() +
theme(legend.position = 'none')
# plot by order ----
# geom bar = count number of links
tmp_network %>%
filter(link_taxa %in% c("Alphaproteobacteria - Firmicutes",
"Alphaproteobacteria - Gammaproteobacteria",
"Firmicutes - Gammaproteobacteria")) %>%
ggplot() +
aes(x = link_order, fill = color) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c(`#3399FF` = "#3399FF",`#FF3366` = "#FF3366")
) +
labs(x = "Order", y = "Number of links") +
coord_flip() +
theme_minimal() +
facet_wrap(vars(link_taxa), scales = "free_y") +
theme(legend.position = 'none')
# plot by order ----
# geom bar = count number of links
tmp_network %>%
filter(link_taxa %in% c("Alphaproteobacteria - Firmicutes",
"Alphaproteobacteria - Gammaproteobacteria",
"Firmicutes - Gammaproteobacteria")) %>%
ggplot() +
aes(x = link_order, fill = color) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c(`#3399FF` = "#3399FF",`#FF3366` = "#FF3366")
) +
labs(x = "Order", y = "Number of links") +
coord_flip() +
theme_minimal() +
facet_wrap(vars(link_taxa), scales = "free_y",ncol = 1) +
theme(legend.position = 'none')
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
install.packages("emmeans")
write.csv("OTU_in_manipulated_suspensions.csv",ps_16S_susp_manip@otu_table,quote = F)
write.csv(file =  "OTU_in_manipulated_suspensions.csv", x = as.matrix(ps_16S_susp_manip@otu_table),quote = F)
ps_16S_susp_manip@sam_data
write.csv(file =  "tmp.csv", x = as.matrix(ps_16S_susp_manip@sam_data),quote = F)
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(reshape2)
library(agricolae)
library(vegan)
library(pairwiseAdonis)
library(multcompView)
library(stringi)
install.packages("pairwiseAdonis")
library(phyloseq)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(reshape2)
library(agricolae)
library(vegan)
library(pairwiseAdonis)
library(multcompView)
install.packages('devtools')
install.packages("devtools")
library(devtools)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
library(multcompView)
library(stringi)
# load work space data
load(".RData")
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# choose data
tmp_ps = ps_16S_micro
# calculate distance matrix and ordination
## rarefy dataset
set.seed(8000)
tmp_ps = rarefy_even_depth(tmp_ps,rngseed = T)
## calculate distances
tmp_dist = distance(tmp_ps,"wunifrac")
## calculate ordination
tmp_ordin = ordinate(tmp_ps, "PCoA", distance = tmp_dist)
# select distances from the control samples
## wrangle distance matrix into a longer data frame
tmp_dist_matrix = melt(as.matrix(tmp_dist))
## remove sample self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
## select sample data
tmp_sam_data = tibble("sample"=as.numeric(tmp_ps@sam_data$sample),
"treatment"=tmp_ps@sam_data$treatment)
## combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
## select distances from the control samples
tmp_data <- tmp_data[tmp_data$treatment1 == "C",]
View(tmp_data)
gc()
# convert dist object into a matrix
tmp_matrix = as.matrix(tmp_dist)
# create a vector with the treatment for each sample
tmp_ttt = tmp_ps@sam_data$treatment
names(tmp_ttt) = tmp_ps@sam_data$sample
# adonis
tmp_adonis = adonis2(formula = tmp_matrix ~ tmp_ttt, permutations = 9999)
tmp_adonis
# pairwise comparison between treatments
tmp_adonis_pair = pairwise.adonis(tmp_matrix, factors=tmp_ttt,p.adjust.m='BH')
# subset pairs name
tmp = unlist(strsplit(tmp_adonis_pair$pairs," vs "))
tmp_adonis_pair[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_adonis_pair[,"b"] <- tmp[seq(2,length(tmp),by=2)]
# statistic groups
## reorder by lower mean value
tmp_adonis_order <- tmp_data[,c("treatment2","value")] %>%
dplyr::group_by(treatment2) %>%
dplyr::summarise(mean = mean(value))
tmp_adonis_order = left_join(tmp_adonis_pair,tmp_adonis_order,
by=c("a"="treatment2"))
tmp = tmp_adonis_order$p.adjusted[order(tmp_adonis_order$mean,decreasing = F)]
names(tmp) <- paste0(tmp_adonis_order$a[order(tmp_adonis_order$mean,decreasing = F)],
"-",tmp_adonis_pair$b[order(tmp_adonis_order$mean,decreasing = F)])
## letters
tmp_letters <- multcompLetters(tmp,compare="<=",threshold=0.05,Letters=letters)
tmp_stat = tibble("treatment"=names(tmp_letters$Letters),
"stat_groups"=tmp_letters$Letters)
View(tmp_stat)
View(tmp_adonis_pair)
# pairwise comparison between treatments
tmp_adonis_pair = pairwise.adonis(tmp_matrix, factors=tmp_ttt,p.adjust.m='BH')
View(tmp_adonis_pair)
## extract full comparison
write.csv(tmp_adonis_pair,"tmp_pairwise.adonis_output.csv")
# wrangle data
tmp_plot_data = tibble("treatment" = tmp_data$treatment2,
"sample" = tmp_data$Var2,
"value"=tmp_data$value)
View(tmp_plot_data)
View(tmp_data)
unique(tmp_data$treatment1)
tmp_plot_data %>%
group_by(treatment) %>%
summarise(value = mean(value),
.groups = "keep")
# STORE DATA
div_metrics[["wunifrac"]] <- tmp_plot_data %>%
group_by(treatment,sample) %>%
summarise(value = mean(value),
.groups = "keep")
tmp_plot_data %>%
group_by(treatment,sample) %>%
summarise(value = mean(value),
.groups = "keep")
# load work space data
load(".RData")
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# choose data
tmp_ps = ps_16S_micro
# calculate distance matrix and ordination
## rarefy dataset
set.seed(8000)
tmp_ps = rarefy_even_depth(tmp_ps,rngseed = T)
## calculate distances
tmp_dist = distance(tmp_ps,"wunifrac")
## calculate ordination
tmp_ordin = ordinate(tmp_ps, "PCoA", distance = tmp_dist)
# select distances from the control samples
## wrangle distance matrix into a longer data frame
tmp_dist_matrix = melt(as.matrix(tmp_dist))
## remove sample self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
## select sample data
tmp_sam_data = tibble("sample"=as.numeric(tmp_ps@sam_data$sample),
"treatment"=tmp_ps@sam_data$treatment)
## combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
## select distances from the control samples
tmp_data <- tmp_data[tmp_data$treatment1 == "C",]
# convert dist object into a matrix
tmp_matrix = as.matrix(tmp_dist)
# create a vector with the treatment for each sample
tmp_ttt = tmp_ps@sam_data$treatment
names(tmp_ttt) = tmp_ps@sam_data$sample
# adonis
tmp_adonis = adonis2(formula = tmp_matrix ~ tmp_ttt, permutations = 9999)
tmp_adonis
# pairwise comparison between treatments
tmp_adonis_pair = pairwise.adonis(tmp_matrix, factors=tmp_ttt,p.adjust.m='BH')
## extract full comparison
write.csv(tmp_adonis_pair,"tmp_pairwise.adonis_output.csv")
# subset pairs name
tmp = unlist(strsplit(tmp_adonis_pair$pairs," vs "))
tmp_adonis_pair[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_adonis_pair[,"b"] <- tmp[seq(2,length(tmp),by=2)]
# statistic groups
## reorder by lower mean value
tmp_adonis_order <- tmp_data[,c("treatment2","value")] %>%
dplyr::group_by(treatment2) %>%
dplyr::summarise(mean = mean(value))
tmp_adonis_order = left_join(tmp_adonis_pair,tmp_adonis_order,
by=c("a"="treatment2"))
tmp = tmp_adonis_order$p.adjusted[order(tmp_adonis_order$mean,decreasing = F)]
names(tmp) <- paste0(tmp_adonis_order$a[order(tmp_adonis_order$mean,decreasing = F)],
"-",tmp_adonis_pair$b[order(tmp_adonis_order$mean,decreasing = F)])
## letters
tmp_letters <- multcompLetters(tmp,compare="<=",threshold=0.05,Letters=letters)
tmp_stat = tibble("treatment"=names(tmp_letters$Letters),
"stat_groups"=tmp_letters$Letters)
# wrangle data
tmp_plot_data = tibble("treatment" = tmp_data$treatment2,
"sample" = tmp_data$Var2,
"value"=tmp_data$value)
# add treatment color and order
tmp_colors <- color_palette[color_palette$set == "treatments",c("treatment","color","order")]
tmp_plot_data = left_join(tmp_plot_data,tmp_colors,by="treatment")
tmp_plot_stat = left_join(tmp_stat,tmp_colors,by="treatment")
# PLOT
ggplot(tmp_plot_data, aes(x = reorder(treatment,desc(order)),
y = value)) +
stat_summary(geom = "bar", fun = mean, colour = "#333333",
linetype = 1,
fill = levels(reorder(tmp_plot_data$color,desc(tmp_plot_data$order))))+
stat_summary(geom = "linerange", fun.data = mean_se, color = "#333333" )+
geom_text(data = tmp_plot_stat,
mapping = aes(label = stat_groups,y = 0.23,x=treatment),
colour="#333333", size=8,inherit.aes = F) +
coord_flip(ylim = c(0,0.26))+
labs(x="Treatment", y= "Distance to control samples", color = "#333333")+
theme_bw()+
theme(axis.title = element_text(face="bold", size=12))
# STORE DATA
div_metrics[["wunifrac"]] <- tmp_plot_data #%>% group_by(treatment,sample) %>% summarise(value = mean(value), .groups = "keep")
# select samples coordinates for ordination plot
tmp_data_2D <- tibble("sample" = as.numeric(rownames(tmp_ordin[["vectors"]])),
"x" = tmp_ordin[["vectors"]][,1],
"y" = tmp_ordin[["vectors"]][,2])
# select axis titles
tmp_x_lab = round(tmp_ordin[["values"]][["Relative_eig"]][1]*100,2)
tmp_x_lab <- paste0("Axis 1: ",tmp_x_lab," %")
tmp_y_lab = round(tmp_ordin[["values"]][["Relative_eig"]][2]*100,2)
tmp_y_lab <- paste0("Axis 2: ",tmp_y_lab," %")
# add treatment, color & order
tmp_data_2D <- left_join(tmp_data_2D,tmp_ps@sam_data[,c("sample","treatment")], by = "sample")
tmp_colors <- color_palette[color_palette$set == "treatments",c("treatment","color","order")]
tmp_data_2D <- left_join(tmp_data_2D,tmp_colors,by = "treatment")
# select data for control ellipse
tmp_data_ellipse = tmp_data_2D[tmp_data_2D$treatment == "C",]
### plot
# plot
ggplot(tmp_data_2D)+
aes(x=x,y=y) +
geom_point(shape = 21,size = 3, fill = tmp_data_2D$color) +
stat_ellipse(data = tmp_data_ellipse, colour = unique(tmp_data_ellipse$color),size=2) +
scale_fill_manual(labels = levels(reorder(tmp_data_2D$treatment,tmp_data_2D$order)),
values = levels(reorder(tmp_data_2D$color,tmp_data_2D$order))) +
labs(x =  paste0("\n",tmp_x_lab),
y = paste0("\n",tmp_y_lab)) +
theme_bw() +
theme(axis.title = element_text(face="bold", size=12))
length(tmp_adonis_pair$p.adjusted <= 0.05)
which(tmp_adonis_pair$p.adjusted <= 0.05)
length(which(tmp_adonis_pair$p.adjusted <= 0.05))
## percent of significant pairwise comparisons
length(which(tmp_adonis_pair$p.adjusted <= 0.05)) / length(tmp_adonis_pair$p.adjusted) * 100
?distance
# choose data
tmp_ps = ps_16S_micro
# calculate distance matrix and ordination
## rarefy dataset
set.seed(8000)
tmp_ps = rarefy_even_depth(tmp_ps,rngseed = T)
## calculate distances
tmp_dist = distance(tmp_ps,"unifrac")
## calculate ordination
tmp_ordin = ordinate(tmp_ps, "PCoA", distance = tmp_dist)
# select distances from the control samples
## wrangle distance matrix into a longer data frame
tmp_dist_matrix = melt(as.matrix(tmp_dist))
## remove sample self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
## select sample data
tmp_sam_data = tibble("sample"=as.numeric(tmp_ps@sam_data$sample),
"treatment"=tmp_ps@sam_data$treatment)
## combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
## select distances from the control samples
tmp_data <- tmp_data[tmp_data$treatment1 == "C",]
## extract full comparison
write.csv(tmp_adonis_pair,"tmp_pairwise.adonis_output_wUnifrac.csv")
library(knitr)
library(xfun)
library(knitr)
install.packages("xfun")
# choose data
tmp_ps = ps_16S_micro
# calculate distance matrix and ordination
## rarefy dataset
set.seed(8000)
tmp_ps = rarefy_even_depth(tmp_ps,rngseed = T)
## calculate distances
tmp_dist = distance(tmp_ps,"unifrac")
## calculate ordination
tmp_ordin = ordinate(tmp_ps, "PCoA", distance = tmp_dist)
# select distances from the control samples
## wrangle distance matrix into a longer data frame
tmp_dist_matrix = melt(as.matrix(tmp_dist))
## remove sample self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
## select sample data
tmp_sam_data = tibble("sample"=as.numeric(tmp_ps@sam_data$sample),
"treatment"=tmp_ps@sam_data$treatment)
## combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
## select distances from the control samples
tmp_data <- tmp_data[tmp_data$treatment1 == "C",]
# convert dist object into a matrix
tmp_matrix = as.matrix(tmp_dist)
# create a vector with the treatment for each sample
tmp_ttt = tmp_ps@sam_data$treatment
names(tmp_ttt) = tmp_ps@sam_data$sample
# check that samples and treatments match well between vectors
#tmp_ttt[1:10]
#rownames(tmp_matrix)[1:10]
# adonis
tmp_adonis = adonis2(formula = tmp_matrix ~ tmp_ttt, permutations = 9999)
tmp_adonis
# pairwise comparison between treatments
tmp_adonis_pair = pairwise.adonis(tmp_matrix, factors=tmp_ttt,p.adjust.m='BH')
## extract full comparison
write.csv(tmp_adonis_pair,"tmp_pairwise.adonis_output_uwUnifrac.csv")
## percent of significant pairwise comparisons
length(which(tmp_adonis_pair$p.adjusted <= 0.05)) / length(tmp_adonis_pair$p.adjusted) * 100
# subset pairs name
tmp = unlist(strsplit(tmp_adonis_pair$pairs," vs "))
tmp_adonis_pair[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_adonis_pair[,"b"] <- tmp[seq(2,length(tmp),by=2)]
# statistic groups
## reorder by lower mean value
tmp_adonis_order <- tmp_data[,c("treatment2","value")] %>%
dplyr::group_by(treatment2) %>%
dplyr::summarise(mean = mean(value))
tmp_adonis_order = left_join(tmp_adonis_pair,tmp_adonis_order,
by=c("a"="treatment2"))
tmp = tmp_adonis_order$p.adjusted[order(tmp_adonis_order$mean,decreasing = F)]
names(tmp) <- paste0(tmp_adonis_order$a[order(tmp_adonis_order$mean,decreasing = F)],
"-",tmp_adonis_pair$b[order(tmp_adonis_order$mean,decreasing = F)])
## letters
tmp_letters <- multcompLetters(tmp,compare="<=",threshold=0.05,Letters=letters)
tmp_stat = tibble("treatment"=names(tmp_letters$Letters),
"stat_groups"=tmp_letters$Letters)
# wrangle data
tmp_plot_data = tibble("treatment" = tmp_data$treatment2,
"sample" = tmp_data$Var2,
"value"=tmp_data$value)
# add treatment color and order
tmp_colors <- color_palette[color_palette$set == "treatments",c("treatment","color","order")]
tmp_plot_data = left_join(tmp_plot_data,tmp_colors,by="treatment")
tmp_plot_stat = left_join(tmp_stat,tmp_colors,by="treatment")
# PLOT
ggplot(tmp_plot_data, aes(x = reorder(treatment,desc(order)),
y = value)) +
stat_summary(geom = "bar", fun = mean, colour = "#333333",
linetype = 1,
fill = levels(reorder(tmp_plot_data$color,desc(tmp_plot_data$order))))+
stat_summary(geom = "linerange", fun.data = mean_se, color = "#333333" )+
geom_text(data = tmp_plot_stat,
mapping = aes(label = stat_groups,y = 0.23,x=treatment),
colour="#333333", size=8,inherit.aes = F) +
coord_flip(ylim = c(0,0.26))+
labs(x="Treatment", y= "Distance to control samples", color = "#333333")+
theme_bw()+
theme(axis.title = element_text(face="bold", size=12))
max(tmp_plot_data$value)
max(tmp_plot_data$value) * 1.1
max(tmp_plot_data$value) * 1.2
# PLOT
ggplot(tmp_plot_data, aes(x = reorder(treatment,desc(order)),
y = value)) +
stat_summary(geom = "bar", fun = mean, colour = "#333333",
linetype = 1,
fill = levels(reorder(tmp_plot_data$color,desc(tmp_plot_data$order))))+
stat_summary(geom = "linerange", fun.data = mean_se, color = "#333333" )+
geom_text(data = tmp_plot_stat,
mapping = aes(label = stat_groups,y = max(tmp_plot_data$value) * 1.1,x=treatment),
colour="#333333", size=8,inherit.aes = F) +
coord_flip(ylim = c(0,max(tmp_plot_data$value) * 1.2))+
labs(x="Treatment", y= "Distance to control samples", color = "#333333")+
theme_bw()+
theme(axis.title = element_text(face="bold", size=12))
# STORE DATA
div_metrics[["uwunifrac"]] <- tmp_plot_data #%>% group_by(treatment,sample) %>% summarise(value = mean(value), .groups = "keep")
# select samples coordinates for ordination plot
tmp_data_2D <- tibble("sample" = as.numeric(rownames(tmp_ordin[["vectors"]])),
"x" = tmp_ordin[["vectors"]][,1],
"y" = tmp_ordin[["vectors"]][,2])
# select axis titles
tmp_x_lab = round(tmp_ordin[["values"]][["Relative_eig"]][1]*100,2)
tmp_x_lab <- paste0("Axis 1: ",tmp_x_lab," %")
tmp_y_lab = round(tmp_ordin[["values"]][["Relative_eig"]][2]*100,2)
tmp_y_lab <- paste0("Axis 2: ",tmp_y_lab," %")
# add treatment, color & order
tmp_data_2D <- left_join(tmp_data_2D,tmp_ps@sam_data[,c("sample","treatment")], by = "sample")
tmp_colors <- color_palette[color_palette$set == "treatments",c("treatment","color","order")]
tmp_data_2D <- left_join(tmp_data_2D,tmp_colors,by = "treatment")
# select data for control ellipse
tmp_data_ellipse = tmp_data_2D[tmp_data_2D$treatment == "C",]
### plot
# plot
ggplot(tmp_data_2D)+
aes(x=x,y=y) +
geom_point(shape = 21,size = 3, fill = tmp_data_2D$color) +
stat_ellipse(data = tmp_data_ellipse, colour = unique(tmp_data_ellipse$color),size=2) +
scale_fill_manual(labels = levels(reorder(tmp_data_2D$treatment,tmp_data_2D$order)),
values = levels(reorder(tmp_data_2D$color,tmp_data_2D$order))) +
labs(x =  paste0("\n",tmp_x_lab),
y = paste0("\n",tmp_y_lab)) +
theme_bw() +
theme(axis.title = element_text(face="bold", size=12))
